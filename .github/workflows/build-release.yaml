name: 'publish'

on:
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            args: ''
            x-target: 'win32-x64'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      
      - name: Get Game List
        env:
          GAME_LIST_URL: ${{ secrets.GAME_LIST_URL }}
        run: |
          curl -L -o src/assets/gamelist.json $GAME_LIST_URL
          if [ ! -f src/assets/gamelist.json ]; then
            echo "Failed to download game list"
            exit 1
          fi
          if [ ! -s src/assets/gamelist.json ]; then
            echo "Game list is empty"
            exit 1
          fi
      
      # Build src-win
      - name: Build src-win project x86_64 binary
        if: matrix.platform == 'windows-latest'
        run: | 
          cd src-win
          cargo build --release --verbose --target=${{ matrix.x-target }}
          cd ..
          cp ./src-win/target/${{ matrix.x-target }}/release/src-win.exe ./src-tauri/resources/src-win.exe

      - name: install frontend dependencies
        run: pnpm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tauriScript: pnpm
          args: ${{ matrix.args }}
      
      - name: get version
        id: extract_version
        run: |
          version=$(date +"%Y.%m.%d")
          echo "version=$version" >> $GITHUB_ENV
        shell: bash

      - name: prepare files 
        # create a folder and zip the files
        # folder-name='discord-quest-completer-${{ env.version }}'
        env:
          build_release_dir: discord-quest-completer-${{ matrix.x-target }}
        run: |
          mkdir -p ./build/${{ env.build_release_dir }}
          cp ./src-tauri/target/release/discord-quest-completer.exe ./build/${{ env.build_release_dir }}/
          cp -r ./src-tauri/target/data/ ./build/${{ env.build_release_dir }}/
          cp -r ./src-tauri/target/resources/ ./build/${{ env.build_release_dir }}/
          zip -r ./build/${{ env.build_release_dir }}.zip ./build/${{ env.build_release_dir }}
          cd ../../..
          echo "build_release_dir=${{ env.build_release_dir }}" >> $GITHUB_ENV

      - name: Create and Upload Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.version }}
          name: Pre-Release ${{ env.version }}
          body: |
            ![GitHub Downloads (specific asset, specific tag)](https://img.shields.io/github/downloads/markterence/discord-activity/${{ env.version }}/${{ env.build_release_dir }}.zip)
          append_body: true
          generate_release_notes: true
          files: |
            ./build/${{ env.build_release_dir }}.zip
          prerelease: true
          draft: true
        env:
          version: ${{ env.version }}
          build_release_dir: ${{ env.build_release_dir }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
